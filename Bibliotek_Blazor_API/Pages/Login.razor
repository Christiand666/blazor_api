@page "/login"
@inject NavigationManager NavigationManager
@*@inject HttpClient https *@
@inject ILocalStorageService localstorage


<PageTitle>Login</PageTitle>

<h3>Login</h3>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Username" class="form-control" />
        <ValidationMessage For="@(() => user.Username)" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>
<div class="text-danger">
    <span>@errorMessage</span>
</div>


@code {
    private Models.User user = new Models.User();
    private string errorMessage = string.Empty;
    public HttpClient http { get; set; }

    protected override async Task OnInitializedAsync()
    {
        http = new HttpClient { BaseAddress = new Uri("http://localhost:") };
    }

    private async Task HandleLogin()
    {
        //var result = await http.PostAsJsonAsync($"/api/login?username={user.Username}&password={user.Password}", user);
        //var token = await result.Content.ReadAsStringAsync();
        //Console.WriteLine(token);

        var userToken = await http.GetStringAsync($"/api/login?username={user.Username}&password={user.Password}");
        if (userToken != null)
        {
            await localstorage.SetItemAsync("userToken", userToken);
        }

        NavigationManager.NavigateTo("/Books");

    }

}
